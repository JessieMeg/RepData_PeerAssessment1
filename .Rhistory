library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("swirl")
library(swirl)
swirl(R Programming)
swirl(RProgramming)
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1, 9, 3.14)
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
C(1,2,3,4)+c(0,10,100)
c(1,2,3,4)+c(0,10,100)
1:20
pi:10
15:1
?`1`
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"Jess")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
past(c(1,2,3),c("X","Y","Z")sep="")
paste(c(1,2,3),c("X","Y","Z")sep="")
paste(c(1,2,3),c("X","Y","Z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
myData<-sample(c(y,z),100)
myNA<-.na(myData)
myNA<-na(myData)
myNA<-is.na(myData)
myNA
myData==NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
name(vect)
names(vect)
vect2<-c(11,2,NA
vect2<-c(11,2,NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myVector<-c(1:20)
myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)<-c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix
myMatrix2<-matrix(data=1:20,nrow=4,ncol=4)
myMatrix2<-matrix(data=c(1:20),nrow=4,ncol=4)
myMatrix2<-matrix(1:20,nrow=4,ncol=4)
myMatrix2<-matrix(c(1:20),nrow=4,ncol=4)
myMatrix2<-matrix(1:20,nrow=4,ncol=4,byrow=TRUE)
myMatrix2<-matrix(c(1:20),nrow=4,ncol=4,byrow=TRUE)
myMatrix2<-matrix(c(1:20,nrow=4,ncol=4,byrow=FALSE))
myMatrix2<-matrix(c(1:20),nrow=4,ncol=4,byrow=FALSE)
myMatrix2<-matrix(1:20,nrow=4,ncol=5)
identical(myMatrix,myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData<-data.frame(patients,myMatrix)
myData
class(data.frame)
class(myData)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(myData)<-cnames
myData
clear
x<-4
class(x)
x<-c(4,"a",TRUE)
class(x)
x<-c(1,3,5)
y<-c(3,2,10)
rbind(x,y)
x<-list(2,"a","b",TRUE)
x[[1]]
x<-1:4
y<-2:3
xy<-x+y
class(xy)
cube<-function(x,n) {x^3}
cube(3)
x<-1:10
if(x>5) {x<-0}
x<-1:10
if(x>5) {x<-10}
f<-function(x) {g<-function(y) {y+z}}
z<-4
f<-function(x) {g<-function(y) {y+z} z<-4 x+g(x)}
x+g(x)
f<-function(x) {g<-function(y) {y+z}}
z<-4
x+g(x)
f<-function(x)
f
f
f<-function(x) {g<-function(y) {y+z} z<-4 x+g(x)}
library(datasets)
data(iris)
?iris
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
colMeans(iris)
apply(iris, 1, mean)
debug(ls)
ls
mean(iris[species$virginica],"Sepal.Width")
class(tx)
tx<-aggregate(iris$Sepal.Length,list(iris$species),mean)
tx = tapply(iris$sepal.len, list(iris$species), mean)
tx <- tapply(iris$sepal.len, list(iris$species), mean)
tx <- tapply(iris$Sepal.Length, list(iris$species), mean)
tx<-aggregate(iris$Sepal.Length,list("species"),mean)
tx<-tapply(iris[1],list(iris$species),mean)
tapply(iris[1],list(iris$species),mean)
tapply(iris[,1],by=list(iris$species),mean)
tapply(iris[1],by=list(iris$species),mean)
tx <- tapply(iris$Sepal.Length, by=list(iris$species), mean)
tx <- tapply(iris$Sepal.Length, by(iris$species), mean)
tx<-tapply(iris$Sepal.Length,iris$species,mean)
len(iris$Sepal.Length)
data(iris)
SepMean<-tapply(iris[1],list(iris$species),mean)
myiris<-data.frame(iris$Sepal.Length,iris$species)
?iris
tx<-aggregate(iris$Sepal.Length,list(iris$Species),mean)
tx
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
avg4cyl = mtcars.Data |> Seq.filter (fun x -> x?cyl = "4") |> S.averageBy (fun x -> x?hp.AsFloat())
aver<-aggregate(mtcars$hp,mtcars$cyl,mean)
aver<-aggregate(mtcars$hp,list(mtcars$cyl),mean)
aver
absdiff<-(aver$x[3]-aver$x[1])
absdiff
209.21429-82.63636
debug(ls)
ls()
q
# Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cacheSolve()
makeCacheMatric()
library(nlme)
library(lattice)
xyplot(weight~time|Diet,BodyWeight)
xyplot(weight ~ time | Diet, BodyWeight)
?llines
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
install.packages(CRAN)
install.packages(c("Matrix", "mgcv", "Rcpp", "yaml"))
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data=airquality)
qplot(Wind, Ozone, data=airquality, facets=.~ factor(Month))
airquality=transform(airquality, Month=factor(Month))
qplot(Wind, Ozone, data = airquality, facets=.~Month)
g<-ggplot(movies,aes(votes, rating))
print(g)
qplot(votes, rating, data=movies) + geom_smooth()
qplot(votes, rating, data=movies) +stats_smooth("loess")
qplot(votes, rating, data=movies, smooth="loess")
qplot(votes, rating, data=movies) + geom_smooth(method="loess")
setwd("~/Data_Science_Files/Exploratory_Data_Analysis/ExData_Plotting1_2")
## Read in the data
HPCMain <- read.table("household_power_consumption.txt", sep = ";", na.strings = "?",
colClasses="character", col.names = colnames(read.table("household_power_consumption.txt",
nrow = 1, header = TRUE, sep=";")))
## Select data for February
HPCData <- subset(HPCMain,HPCMain[1] == "1/2/2007" | HPCMain[1] == "2/2/2007")
HPCData$Date_Hour <- paste(HPCData$Date,HPCData$Time, sep = " ")
HPCData$Date_Hour <- strptime(HPCData$Date_Hour, "%d/%m/%Y %H:%M:%S")
## Define variable as numeric
HPCData$Global_active_power = as.numeric(as.character(HPCData$Global_active_power))
## Set up png file and define pixels:
png(file="plot3.png",width=480,height=480)
## Plot 3
plot(HPCData$Date_Hour,HPCData$Sub_metering_1  , type = "l",xlab="",ylab="Energy Sub metering")
points(HPCData$Date_Hour,HPCData$Sub_metering_2  , type = "l",xlab="",ylab="Sub metering",col = "red")
points(HPCData$Date_Hour,HPCData$Sub_metering_3  , type = "l",xlab="",ylab="Sub metering",col = "blue")
## legend("topright",legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lwd = 2, col = c("black","red","blue"))
legend("topright", c("Sub_metering_1", "Sub_metering_2  ", "Sub_metering_3"),
cex=0.75, col=c("black", "red", "blue"), lty=1, lwd=2)
## Close png file
dev.off()
## Read in the data
HPCMain <- read.table("household_power_consumption.txt", sep = ";", na.strings = "?",
colClasses="character", col.names = colnames(read.table("household_power_consumption.txt",
nrow = 1, header = TRUE, sep=";")))
## Select data for February
HPCData <- subset(HPCMain,HPCMain[1] == "1/2/2007" | HPCMain[1] == "2/2/2007")
HPCData$Date_Hour <- paste(HPCData$Date,HPCData$Time, sep = " ")
HPCData$Date_Hour <- strptime(HPCData$Date_Hour, "%d/%m/%Y %H:%M:%S")
## Define variable as numeric
HPCData$Global_active_power = as.numeric(as.character(HPCData$Global_active_power))
## Set up png file and define pixels:
png(file="plot1.png",width=480,height=480)
## Plot 1
hist(HPCData$Global_active_power, col = "red", ylab = "Frequency",
xlab = "Global Active Power (kilowatts)", main = "Global Active Power ")
## Close png file
dev.off()
setwd("~/Data_Science_Files/RepData_PeerAssessment1")
setwd("~/Data_Science_Files/RepData_PeerAssessment1")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
IntervalIMP<-aggregate(steps~interval,data=Activityimputed,mean,na.rm=TRUE)
